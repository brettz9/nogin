{"version":3,"file":"resetPasswordController.iife.min.js","sources":["../utilities/ajaxFormClientSideValidate.js","../views/reset-password.js","../views/utilities/AlertDialog.js","../views/validators/ResetPasswordValidatorView.js","../form-validators/ResetPasswordValidator.js","resetPasswordController.js"],"sourcesContent":["/* globals $, Nogin -- `$` is jQuery not ESM, `Nogin` is server-set */\n\n// Note: This per-request approach suffers from the possibility that the\n//   may subsequently open a page from the site with nogin in another tab\n//   where that page sets a new, different token meta expectation to a\n//   new value and this will thereby become invalid.\nconst xsrfCookie = $('meta[name=\"csrf-token\"]').attr('content');\n\n/**\n * @typedef {{\n *   headers?: {[key: string]: string|undefined},\n *   url?: string,\n *   beforeSubmit?: (\n *     arr: {name: string, value: string|boolean}[],\n *     $form: any,\n *     options: any\n *   ) => boolean|void,\n *   success: (\n *     responseText: string, status: string, xhr: any, $form: JQuery\n *   ) => void,\n *   error: (cfg: {\n *     responseText: string\n *   }) => void,\n * }} AjaxFormConfig\n */\n\n/**\n * @typedef {JQuery & {\n *   ajaxForm: (cfg: AjaxFormConfig) => void\n * }} JQueryWithAjaxForm\n */\n\n/**\n * @param {JQueryWithAjaxForm} form\n * @param {AjaxFormConfig & {\n *   validate: (e: Event) => void,\n *   checkXSRF?: boolean\n * }} cfg\n * @returns {void}\n */\nconst ajaxFormClientSideValidate = (form, cfg) => {\n  const {\n    validate,\n    // `ajaxForm` properties and methods\n    url,\n    beforeSubmit,\n    success,\n    error,\n    checkXSRF = true\n  } = cfg;\n  // As per problem #3 at https://web.archive.org/web/20160930102348/http://www.html5rocks.com/en/tutorials/forms/constraintvalidation/#toc-current-implementation-issues ,\n  //  we can't do the validation at submit, so we instead add a capturing\n  //  change listener as well as input listeners to reset the messages;\n  //  note that we can't use the `invalid` event to call `reportValidity`\n  //  after our `setCustomValidity()` (to ensure we get the bubbles showing)\n  //  as that fires further `invalid` events; and setting the form to\n  //  `novalidate` won't show the bubbles.\n  form[0].addEventListener('change', (e) => {\n    // Provide custom messages of invalidity\n    validate(e);\n  }, true);\n\n  form[0].addEventListener('input', ({target}) => {\n    const field = /** @type {HTMLInputElement} */ (target);\n    field.setCustomValidity('');\n    field.checkValidity();\n  }, true);\n\n  // istanbul ignore if\n  if (checkXSRF && !xsrfCookie && !Nogin.disableXSRF) {\n    error({responseText: 'UnknownError'});\n    return;\n  }\n\n  form.ajaxForm({\n    headers: {\n      // `$.ajaxForm` will auto-check for special `meta` tags to add XSRF\n      //   data, but we avoid the extra meta it requires by sending on the\n      //   header.\n      'X-XSRF-Token': xsrfCookie\n    },\n    url,\n    beforeSubmit,\n    success,\n    error\n  });\n};\n\nexport default ajaxFormClientSideValidate;\n","/* globals $ -- `$` is jQuery not ESM */\n\nconst ResetPasswordView = {\n  /**\n   * @returns {import('../utilities/ajaxFormClientSideValidate.js').\n   *   JQueryWithAjaxForm} `HTMLFormElement`\n   */\n  getSetPasswordForm () {\n    return (\n      /**\n       * @type {import('../utilities/ajaxFormClientSideValidate.js').\n       *   JQueryWithAjaxForm}\n       */ ($('#set-password-form'))\n    );\n  },\n\n  /**\n   * @returns {JQuery} `HTMLInputElement`\n   */\n  getPassword () {\n    return $('[data-name=\"reset-pass\"]');\n  },\n\n  /**\n   * @returns {JQuery} `HTMLButtonElement`\n   */\n  getSetPasswordSubmit () {\n    return $('[data-name=\"reset-password-submit\"]');\n  }\n};\n\nexport default ResetPasswordView;\n","/* globals $ -- `$` is jQuery not ESM */\n\n/**\n * @typedef {JQuery & {\n *   modal: (showOrHide: \"show\"|\"hide\"|{\n *     show: boolean,\n *     keyboard: boolean,\n *     backdrop: boolean|\"static\"\n *   }) => JQueryWithModal\n * }} JQueryWithModal\n */\n\nconst AlertDialog = {\n  /**\n   * @param {object} cfg\n   * @param {string} cfg.heading\n   * @param {Element|string} cfg.body\n   * @param {boolean} cfg.keyboard\n   * @param {boolean|\"static\"} cfg.backdrop\n   * @returns {JQueryWithModal} `HTMLDivElement`\n   */\n  populate ({\n    heading,\n    body,\n    keyboard,\n    backdrop\n  }) {\n    const modal = /** @type {JQueryWithModal} */ (\n      $('[data-name=modal-alert]')).modal({\n      show: false, keyboard, backdrop\n    });\n    $('[data-name=modal-alert] .modal-header [data-name=modal-title]').text(\n      heading\n    );\n    $('[data-name=modal-alert] [data-name=modal-body] p').empty().append(body);\n    $('[data-name=modal-alert] button').on('click', (e) => {\n      e.preventDefault();\n      modal.modal('hide');\n    });\n    return modal;\n  }\n};\n\nexport default AlertDialog;\n","/* globals $, Nogin -- `$` is jQuery not ESM, `Nogin` is server-set */\nimport AlertDialog from '../utilities/AlertDialog.js';\n\nconst {_} = Nogin;\n\nconst modal =\n  /**\n   * @type {import('../utilities/AlertDialog.js').JQueryWithModal}\n   */ ($('#set-password'));\nconst ResetPasswordValidatorView = {\n  /**\n   * @returns {import('../utilities/AlertDialog.js').\n   *   JQueryWithModal} `HTMLDivElement`\n   */\n  setPasswordDialog () {\n    modal.modal({show: false, keyboard: false, backdrop: 'static'});\n    return modal;\n  },\n\n  /**\n   * @returns {JQuery} `HTMLDivElement`\n   */\n  getSetPasswordAlert () {\n    return modal.find('.alert');\n  },\n\n  /**\n   * @param {JQuery} alertDialog\n   * @returns {JQuery} `HTMLButtonElement`\n   */\n  getLockedAlertButton (alertDialog) {\n    return alertDialog.find('button');\n  },\n\n  /**\n   * @returns {void}\n   */\n  showSuccess () {\n    this.addAlert(/** @type {string} */ (_('YourPasswordHasBeenReset')));\n  },\n\n  /**\n   * @param {string} msg\n   * @returns {void}\n   */\n  addAlert (msg) {\n    this.getSetPasswordAlert().text(msg);\n  },\n\n  /**\n   * @param {\"bad-session\"|undefined} type\n   * @returns {import('../utilities/AlertDialog.js').JQueryWithModal|void}\n   */\n  showDanger (type) {\n    if (type === 'bad-session') {\n      return AlertDialog.populate({\n        heading: /** @type {string} */ (_('error')),\n        body: /** @type {Element} */ (_('SessionLost', {\n          lb: $('<br/>')[0]\n        })),\n        keyboard: false,\n        backdrop: 'static'\n      });\n    }\n    return this.addAlert(/** @type {string} */ (\n      _('SomethingWentWrongPleaseTryAgain')\n    ));\n  },\n\n  messages: {\n    ShouldBeMinimumLength: _('ShouldBeMinimumLength')\n  }\n};\n\nexport default ResetPasswordValidatorView;\n","/* globals Nogin -- Server-set */\nimport ResetPasswordValidatorView from\n  '../views/validators/ResetPasswordValidatorView.js';\n\n/**\n * Resetting password validation.\n */\nclass ResetPasswordValidator {\n  /**\n   * @param {HTMLInputElement} pass Password element\n   * @returns {boolean}\n   */\n  static validatePassword (pass) {\n    pass.setCustomValidity('');\n    // todo[cypress@>=14.0.0]: validity: remove this disabling of istanbul\n    //   to see if fixed\n    //   see https://github.com/cypress-io/cypress/issues/6678\n    // istanbul ignore if\n    if (pass.validity.tooShort) {\n      pass.setCustomValidity(\n        /** @type {string} */ (\n          ResetPasswordValidatorView.messages.ShouldBeMinimumLength\n        )\n      );\n    }\n    return /** @type {HTMLFormElement} */ (pass.form).reportValidity();\n  }\n\n  /**\n   * Sets up properties.\n   */\n  constructor () {\n    this.modal = ResetPasswordValidatorView.setPasswordDialog();\n    this.alert = ResetPasswordValidatorView.getSetPasswordAlert();\n    this.alert.hide();\n  }\n\n  /**\n   * @returns {import('../views/utilities/AlertDialog.js').JQueryWithModal}\n   */\n  getPasswordDialog () {\n    return this.modal;\n  }\n\n  /**\n   * @param {\"bad-session\"|undefined} [type]\n   * @returns {void}\n   */\n  showAlert (type) {\n    const alertDialog = ResetPasswordValidatorView.showDanger(type);\n    if (alertDialog) {\n      alertDialog.modal('show');\n      const redirectToRoot = () => {\n        Nogin.redirect('root');\n      };\n      ResetPasswordValidatorView.getLockedAlertButton(alertDialog).on(\n        'click',\n        redirectToRoot\n      );\n      setTimeout(redirectToRoot, 3000);\n      return;\n    }\n\n    this.alert.show();\n  }\n\n  /**\n   * @returns {void}\n   */\n  hideAlert () {\n    this.alert.hide();\n  }\n\n  /**\n   * @returns {void}\n   */\n  showSuccess () {\n    ResetPasswordValidatorView.showSuccess();\n    this.alert.fadeIn(500);\n  }\n}\n\nexport default ResetPasswordValidator;\n","/* globals Nogin -- Server-set */\n\nimport ajaxFormClientSideValidate from\n  '../utilities/ajaxFormClientSideValidate.js';\nimport ResetPasswordView from '../views/reset-password.js';\nimport ResetPasswordValidator from\n  '../form-validators/ResetPasswordValidator.js';\n\nconst rv = new ResetPasswordValidator();\n\nconst pass = ResetPasswordView.getPassword();\n\nconst setPasswordSubmit = ResetPasswordView.getSetPasswordSubmit();\n\nconst setPasswordForm = ResetPasswordView.getSetPasswordForm();\n\najaxFormClientSideValidate(\n  setPasswordForm,\n  {\n    validate () {\n      rv.hideAlert();\n      ResetPasswordValidator.validatePassword(\n        /** @type {HTMLInputElement} */\n        (pass[0])\n      );\n    },\n    beforeSubmit (/* formData, jqForm, options */) {\n      rv.hideAlert();\n    },\n    success (/* responseText, status, xhr, $form */) {\n      setPasswordSubmit.addClass('disabled');\n      setPasswordSubmit.prop('disabled', true);\n      rv.showSuccess();\n      setTimeout(() => {\n        Nogin.redirect('root');\n      }, 3000);\n    },\n    error (e) {\n      switch (e.responseText) {\n      case 'bad-session':\n        rv.showAlert('bad-session');\n        break;\n      default:\n        rv.showAlert();\n        break;\n      }\n    }\n  }\n);\n\nconst setPasswordDialog = rv.getPasswordDialog();\nsetPasswordDialog.on('shown.bs.modal', () => {\n  pass[0].focus();\n});\nsetPasswordDialog.modal('show');\n"],"names":["xsrfCookie","$","attr","ResetPasswordView","form","cfg","validate","url","beforeSubmit","success","error","_cfg$checkXSRF","checkXSRF","AlertDialog","populate","_ref","heading","body","keyboard","backdrop","modal","show","text","empty","append","on","e","preventDefault","_","Nogin","ResetPasswordValidatorView","setPasswordDialog","getSetPasswordAlert","find","getLockedAlertButton","alertDialog","showSuccess","this","addAlert","msg","showDanger","type","lb","messages","ShouldBeMinimumLength","ResetPasswordValidator","_classCallCheck","alert","hide","key","value","pass","setCustomValidity","validity","tooShort","reportValidity","redirectToRoot","redirect","setTimeout","fadeIn","rv","setPasswordSubmit","setPasswordForm","hideAlert","validatePassword","addClass","prop","responseText","showAlert","addEventListener","field","target","checkValidity","disableXSRF","ajaxForm","headers","getPasswordDialog","focus"],"mappings":"yBAMA,IAAMA,EAAaC,EAAE,2BAA2BC,KAAK,WCJ/CC,EAKc,WAChB,OAIOF,EAAE,qBAEV,EAZGE,EAiBO,WACT,OAAOF,EAAE,2BACV,EAnBGE,EAwBgB,WAClB,OAAOF,EAAE,sCACX,8cChBF,IF4BoCG,EAAMC,EAEtCC,EAEAC,EACAC,EACAC,EACAC,EAAKC,EACLC,EEpCEC,EASJC,SAAQC,GAKL,IAJDC,EAAOD,EAAPC,QACAC,EAAIF,EAAJE,KACAC,EAAQH,EAARG,SACAC,EAAQJ,EAARI,SAEMC,EACJnB,EAAE,2BAA4BmB,MAAM,CACpCC,MAAM,EAAOH,SAAAA,EAAUC,SAAAA,IAUzB,OARAlB,EAAE,iEAAiEqB,KACjEN,GAEFf,EAAE,oDAAoDsB,QAAQC,OAAOP,GACrEhB,EAAE,kCAAkCwB,GAAG,SAAS,SAACC,GAC/CA,EAAEC,iBACFP,EAAMA,MAAM,OACd,IACOA,CACT,ECrCKQ,EAAKC,MAALD,EAEDR,EAGCnB,EAAE,iBACH6B,EAA6B,CAKjCC,kBAAiB,WAEf,OADAX,EAAMA,MAAM,CAACC,MAAM,EAAOH,UAAU,EAAOC,SAAU,WAC9CC,CACR,EAKDY,oBAAmB,WACjB,OAAOZ,EAAMa,KAAK,SACnB,EAMDC,qBAAAA,SAAsBC,GACpB,OAAOA,EAAYF,KAAK,SACzB,EAKDG,YAAW,WACTC,KAAKC,SAAgCV,EAAE,4BACxC,EAMDU,SAAAA,SAAUC,GACRF,KAAKL,sBAAsBV,KAAKiB,EACjC,EAMDC,WAAAA,SAAYC,GACV,MAAa,gBAATA,EACK5B,EAAqB,CAC1BG,QAAgCY,EAAE,SAClCX,KAA8BW,EAAE,cAAe,CAC7Cc,GAAIzC,EAAE,SAAS,KAEjBiB,UAAU,EACVC,SAAU,WAGPkB,KAAKC,SACVV,EAAE,oCAEL,EAEDe,SAAU,CACRC,sBAAuBhB,EAAE,2BC/DvBiB,EAAsB,WA8B1B,SANA,SAAAA,iGAAeC,MAAAD,GACbR,KAAKjB,MAAQU,EAA2BC,oBACxCM,KAAKU,MAAQjB,EAA2BE,sBACxCK,KAAKU,MAAMC,MACb,IA4CC,CAAA,CAAAC,IAAA,mBAAAC,MAnED,SAAyBC,GAavB,OAZAA,EAAKC,kBAAkB,IAKnBD,EAAKE,SAASC,UAChBH,EAAKC,kBAEDtB,EAA2Ba,SAASC,uBAIHO,EAAK/C,KAAMmD,gBACpD,OAWA,CAAA,CAAAN,IAAA,oBAAAC,MAGA,WACE,OAAOb,KAAKjB,KACd,GAEA,CAAA6B,IAAA,YAAAC,MAIA,SAAWT,GACT,IAAMN,EAAcL,EAA2BU,WAAWC,GAC1D,GAAIN,EAAa,CACfA,EAAYf,MAAM,QAClB,IAAMoC,EAAiB,WACrB3B,MAAM4B,SAAS,SAOjB,OALA3B,EAA2BI,qBAAqBC,GAAaV,GAC3D,QACA+B,QAEFE,WAAWF,EAAgB,IAE7B,CAEAnB,KAAKU,MAAM1B,MACb,GAEA,CAAA4B,IAAA,YAAAC,MAGA,WACEb,KAAKU,MAAMC,MACb,GAEA,CAAAC,IAAA,cAAAC,MAGA,WACEpB,EAA2BM,cAC3BC,KAAKU,MAAMY,OAAO,IACpB,+FArDC,CAnByB,GCCtBC,EAAK,IAAIf,EAETM,EAAOhD,IAEP0D,EAAoB1D,IAEpB2D,EAAkB3D,IL0BYC,EKvBlC0D,ELyBExD,GAFsCD,EKtBxC,CACEC,SAAQ,WACNsD,EAAGG,YACHlB,EAAuBmB,iBAEpBb,EAAK,GAET,EACD3C,aAAY,WACVoD,EAAGG,WACJ,EACDtD,QAAO,WACLoD,EAAkBI,SAAS,YAC3BJ,EAAkBK,KAAK,YAAY,GACnCN,EAAGxB,cACHsB,YAAW,WACT7B,MAAM4B,SAAS,OAChB,GAAE,IACJ,EACD/C,MAAAA,SAAOgB,GAEA,gBADGA,EAAEyC,aAERP,EAAGQ,UAAU,eAGbR,EAAGQ,WAGP,ILJA9D,SAEAC,EAKEF,EALFE,IACAC,EAIEH,EAJFG,aACAC,EAGEJ,EAHFI,QACAC,EAEEL,EAFFK,MAAKC,EAEHN,EADFO,UAAAA,OAAY,IAAHD,GAAOA,EASlBP,EAAK,GAAGiE,iBAAiB,UAAU,SAAC3C,GAElCpB,EAASoB,EACV,IAAE,GAEHtB,EAAK,GAAGiE,iBAAiB,SAAS,SAAAtD,GAAc,IACxCuD,EADkCvD,EAANwD,OAElCD,EAAMlB,kBAAkB,IACxBkB,EAAME,eACP,IAAE,IAGC5D,GAAcZ,GAAe6B,MAAM4C,YAKvCrE,EAAKsE,SAAS,CACZC,QAAS,CAIP,eAAgB3E,GAElBO,IAAAA,EACAC,aAAAA,EACAC,QAAAA,EACAC,MAAAA,IAdAA,EAAM,CAACyD,aAAc,iBKpBzB,IAAMpC,EAAoB6B,EAAGgB,oBAC7B7C,EAAkBN,GAAG,kBAAkB,WACrC0B,EAAK,GAAG0B,OACV,IACA9C,EAAkBX,MAAM"}