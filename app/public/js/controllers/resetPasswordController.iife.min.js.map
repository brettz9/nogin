{"version":3,"file":"resetPasswordController.iife.min.js","sources":["../utilities/ajaxFormClientSideValidate.js","../views/reset-password.js","../views/validators/ResetPasswordValidatorView.js","../form-validators/ResetPasswordValidator.js","resetPasswordController.js"],"sourcesContent":["const ajaxFormClientSideValidate = (form, {\n  validate,\n  // `ajaxForm` properties and methods\n  url,\n  beforeSubmit,\n  success,\n  error\n}) => {\n  // As per problem #3 at https://www.html5rocks.com/en/tutorials/forms/constraintvalidation/#toc-current-implementation-issues ,\n  //  we can't do the validation at submit, so we instead add a capturing\n  //  change listener as well as input listeners to reset the messages;\n  //  note that we can't use the `invalid` event to call `reportValidity`\n  //  after our `setCustomValidity()` (to ensure we get the bubbles showing)\n  //  as that fires further `invalid` events; and setting the form to\n  //  `novalidate` won't show the bubbles.\n  form[0].addEventListener('change', (e) => {\n    // Provide custom messages of invalidity\n    validate(e);\n  }, true);\n\n  form[0].addEventListener('input', ({target: field}) => {\n    field.setCustomValidity('');\n    field.checkValidity('');\n  }, true);\n\n  return form.ajaxForm({\n    url,\n    beforeSubmit,\n    success,\n    error\n  });\n};\n\nexport default ajaxFormClientSideValidate;\n","/* globals $ */\n\nconst ResetPasswordView = {\n  /**\n   * @returns {external:jQuery} `HTMLFormElement`\n   */\n  getSetPasswordForm () {\n    return $('#set-password-form');\n  },\n\n  /**\n   * @returns {external:jQuery} `HTMLInputElement`\n   */\n  getPassword () {\n    return $('[data-name=\"reset-pass\"]');\n  },\n\n  /**\n   * @returns {external:jQuery} `HTMLButtonElement`\n   */\n  getSetPasswordSubmit () {\n    return $('[data-name=\"reset-password-submit\"]');\n  }\n};\n\nexport default ResetPasswordView;\n","/* globals $, Nogin */\n\nconst {_} = Nogin;\n\nconst modal = $('#set-password');\nconst ResetPasswordValidatorView = {\n  /**\n   * @returns {external:jQuery} `HTMLDivElement`\n   */\n  setPasswordDialog () {\n    modal.modal({show: false, keyboard: false, backdrop: 'static'});\n    return modal;\n  },\n\n  /**\n   * @returns {external:jQuery} `HTMLDivElement`\n   */\n  getSetPasswordAlert () {\n    return modal.find('.alert');\n  },\n\n  /**\n   * @returns {void}\n   */\n  showSuccess () {\n    this.addAlert(_('YourPasswordHasBeenReset'));\n  },\n\n  addAlert (msg) {\n    this.getSetPasswordAlert().text(msg);\n  },\n\n  /**\n   * @returns {void}\n   */\n  showDanger () {\n    this.addAlert(_('SomethingWentWrongPleaseTryAgain'));\n  },\n\n  messages: {\n    ShouldBeMinimumLength: _('ShouldBeMinimumLength')\n  }\n};\n\nexport default ResetPasswordValidatorView;\n","import ResetPasswordValidatorView from\n  '../views/validators/ResetPasswordValidatorView.js';\n\n/**\n * Resetting password validation.\n */\nclass ResetPasswordValidator {\n  /**\n   * @param {external:jQuery} pass Password element\n   * @returns {boolean}\n   */\n  static validatePassword (pass) {\n    pass.setCustomValidity('');\n    // Todo[cypress@>4.7.0]: validity: remove this disabling of istanbul\n    //   to see if fixed\n    //   see https://github.com/cypress-io/cypress/issues/6678\n    // istanbul ignore if\n    if (pass.validity.tooShort) {\n      pass.setCustomValidity(\n        ResetPasswordValidatorView.messages.ShouldBeMinimumLength\n      );\n    }\n    return pass.form.reportValidity();\n  }\n\n  /**\n   * Sets up properties.\n   */\n  constructor () {\n    this.modal = ResetPasswordValidatorView.setPasswordDialog();\n    this.alert = ResetPasswordValidatorView.getSetPasswordAlert();\n    this.alert.hide();\n  }\n\n  /**\n   * @returns {external:jQuery}\n   */\n  getPasswordDialog () {\n    return this.modal;\n  }\n\n  /**\n   * @returns {void}\n   */\n  showAlert () {\n    ResetPasswordValidatorView.showDanger();\n    this.alert.show();\n  }\n\n  /**\n   * @returns {void}\n   */\n  hideAlert () {\n    this.alert.hide();\n  }\n\n  /**\n   * @returns {void}\n   */\n  showSuccess () {\n    ResetPasswordValidatorView.showSuccess();\n    this.alert.fadeIn(500);\n  }\n}\n\nexport default ResetPasswordValidator;\n","/* globals Nogin */\n\nimport ajaxFormClientSideValidate from\n  '../utilities/ajaxFormClientSideValidate.js';\nimport ResetPasswordView from '../views/reset-password.js';\nimport ResetPasswordValidator from\n  '../form-validators/ResetPasswordValidator.js';\n\nconst rv = new ResetPasswordValidator();\n\nconst pass = ResetPasswordView.getPassword();\n\nconst setPasswordSubmit = ResetPasswordView.getSetPasswordSubmit();\n\nconst setPasswordForm = ResetPasswordView.getSetPasswordForm();\n\najaxFormClientSideValidate(\n  setPasswordForm,\n  {\n    validate () {\n      rv.hideAlert();\n      ResetPasswordValidator.validatePassword(pass[0]);\n    },\n    beforeSubmit (formData, jqForm, options) {\n      rv.hideAlert();\n    },\n    success (responseText, status, xhr, $form) {\n      setPasswordSubmit.addClass('disabled');\n      setPasswordSubmit.prop('disabled', true);\n      rv.showSuccess();\n      setTimeout(() => {\n        Nogin.redirect('root');\n      }, 3000);\n    },\n    error () {\n      rv.showAlert();\n    }\n  }\n);\n\nconst setPasswordDialog = rv.getPasswordDialog();\nsetPasswordDialog.on('shown.bs.modal', () => {\n  pass[0].focus();\n});\nsetPasswordDialog.modal('show');\n"],"names":["ResetPasswordView","$","form","validate","url","beforeSubmit","success","error","_","Nogin","modal","ResetPasswordValidatorView","setPasswordDialog","show","keyboard","backdrop","getSetPasswordAlert","find","showSuccess","addAlert","msg","text","showDanger","messages","ShouldBeMinimumLength","ResetPasswordValidator","alert","hide","pass","setCustomValidity","validity","tooShort","reportValidity","this","fadeIn","rv","setPasswordSubmit","setPasswordForm","hideAlert","validatePassword","formData","jqForm","options","responseText","status","xhr","$form","addClass","prop","setTimeout","redirect","showAlert","addEventListener","e","field","target","checkValidity","ajaxForm","getPasswordDialog","on","focus"],"mappings":"yBAAA,ICEMA,oBAKKC,EAAE,uBALPD,oBAYKC,EAAE,6BAZPD,oBAmBKC,EAAE,2QDrBuBC,IAClCC,EAEAC,EACAC,EACAC,EACAC,EEJKC,EAAKC,MAALD,EAEDE,EAAQT,EAAE,iBACVU,EAA6B,CAIjCC,oCACEF,EAAMA,MAAM,CAACG,MAAM,EAAOC,UAAU,EAAOC,SAAU,WAC9CL,GAMTM,sCACSN,EAAMO,KAAK,WAMpBC,4BACOC,SAASX,EAAE,8BAGlBW,kBAAUC,QACHJ,sBAAsBK,KAAKD,IAMlCE,2BACOH,SAASX,EAAE,sCAGlBe,SAAU,CACRC,sBAAuBhB,EAAE,2BClCvBiB,qIAuBGf,MAAQC,EAA2BC,yBACnCc,MAAQf,EAA2BK,2BACnCU,MAAMC,+DApBYC,UACvBA,EAAKC,kBAAkB,IAKnBD,EAAKE,SAASC,UAChBH,EAAKC,kBACHlB,EAA2BY,SAASC,uBAGjCI,EAAK1B,KAAK8B,2EAgBVC,KAAKvB,0CAOZC,EAA2BW,kBACtBI,MAAMb,gDAONa,MAAMC,6CAOXhB,EAA2BO,mBACtBQ,MAAMQ,OAAO,cCrDhBC,EAAK,IAAIV,EAETG,EAAO5B,IAEPoC,EAAoBpC,IAEpBqC,EAAkBrC,IJdYE,EIiBlCmC,EJhBAlC,KIiBA,CACEA,oBACEgC,EAAGG,YACHb,EAAuBc,iBAAiBX,EAAK,KAE/CvB,sBAAcmC,EAAUC,EAAQC,GAC9BP,EAAGG,aAELhC,iBAASqC,EAAcC,EAAQC,EAAKC,GAClCV,EAAkBW,SAAS,YAC3BX,EAAkBY,KAAK,YAAY,GACnCb,EAAGjB,cACH+B,YAAW,WACTxC,MAAMyC,SAAS,UACd,MAEL3C,iBACE4B,EAAGgB,eJlCPhD,SAEAC,IAAAA,IACAC,IAAAA,aACAC,IAAAA,QACAC,IAAAA,MASAL,EAAK,GAAGkD,iBAAiB,UAAU,SAACC,GAElClD,EAASkD,MACR,GAEHnD,EAAK,GAAGkD,iBAAiB,SAAS,gBAAUE,IAARC,OAClCD,EAAMzB,kBAAkB,IACxByB,EAAME,cAAc,OACnB,GAEItD,EAAKuD,SAAS,CACnBrD,IAAAA,EACAC,aAAAA,EACAC,QAAAA,EACAC,MAAAA,IIWJ,IAAMK,EAAoBuB,EAAGuB,oBAC7B9C,EAAkB+C,GAAG,kBAAkB,WACrC/B,EAAK,GAAGgC,WAEVhD,EAAkBF,MAAM"}