{"version":3,"file":"resetPasswordController.iife.min.js","sources":["../utilities/ajaxFormClientSideValidate.js","../views/reset-password.js","../views/utilities/AlertDialog.js","../views/validators/ResetPasswordValidatorView.js","../form-validators/ResetPasswordValidator.js","resetPasswordController.js"],"sourcesContent":["const ajaxFormClientSideValidate = (form, {\n  validate,\n  // `ajaxForm` properties and methods\n  url,\n  beforeSubmit,\n  success,\n  error\n}) => {\n  // As per problem #3 at https://www.html5rocks.com/en/tutorials/forms/constraintvalidation/#toc-current-implementation-issues ,\n  //  we can't do the validation at submit, so we instead add a capturing\n  //  change listener as well as input listeners to reset the messages;\n  //  note that we can't use the `invalid` event to call `reportValidity`\n  //  after our `setCustomValidity()` (to ensure we get the bubbles showing)\n  //  as that fires further `invalid` events; and setting the form to\n  //  `novalidate` won't show the bubbles.\n  form[0].addEventListener('change', (e) => {\n    // Provide custom messages of invalidity\n    validate(e);\n  }, true);\n\n  form[0].addEventListener('input', ({target: field}) => {\n    field.setCustomValidity('');\n    field.checkValidity('');\n  }, true);\n\n  return form.ajaxForm({\n    url,\n    beforeSubmit,\n    success,\n    error\n  });\n};\n\nexport default ajaxFormClientSideValidate;\n","/* globals $ */\n\nconst ResetPasswordView = {\n  /**\n   * @returns {external:jQuery} `HTMLFormElement`\n   */\n  getSetPasswordForm () {\n    return $('#set-password-form');\n  },\n\n  /**\n   * @returns {external:jQuery} `HTMLInputElement`\n   */\n  getPassword () {\n    return $('[data-name=\"reset-pass\"]');\n  },\n\n  /**\n   * @returns {external:jQuery} `HTMLButtonElement`\n   */\n  getSetPasswordSubmit () {\n    return $('[data-name=\"reset-password-submit\"]');\n  }\n};\n\nexport default ResetPasswordView;\n","/* globals $ */\n\nconst AlertDialog = {\n  /**\n   * @param {PlainObject} cfg\n   * @param {string} cfg.heading\n   * @param {external:jQuery} cfg.body\n   * @param {boolean} cfg.keyboard\n   * @param {boolean|\"static\"} cfg.backdrop\n   * @returns {external:jQuery} `HTMLDivElement`\n   */\n  populate ({\n    heading,\n    body,\n    keyboard,\n    backdrop\n  }) {\n    $('[data-name=modal-alert]').modal({\n      show: false, keyboard, backdrop\n    });\n    $('[data-name=modal-alert] .modal-header [data-name=modal-title]').text(\n      heading\n    );\n    $('[data-name=modal-alert] [data-name=modal-body] p').empty().append(body);\n    return $('[data-name=modal-alert]');\n  }\n};\n\nexport default AlertDialog;\n","/* globals $, Nogin */\nimport AlertDialog from '../utilities/AlertDialog.js';\n\nconst {_} = Nogin;\n\nconst modal = $('#set-password');\nconst ResetPasswordValidatorView = {\n  /**\n   * @returns {external:jQuery} `HTMLDivElement`\n   */\n  setPasswordDialog () {\n    modal.modal({show: false, keyboard: false, backdrop: 'static'});\n    return modal;\n  },\n\n  /**\n   * @returns {external:jQuery} `HTMLDivElement`\n   */\n  getSetPasswordAlert () {\n    return modal.find('.alert');\n  },\n\n  /**\n   * @param {external:jQuery} alertDialog\n   * @returns {external:jQuery} `HTMLButtonElement`\n   */\n  getLockedAlertButton (alertDialog) {\n    return alertDialog.find('button');\n  },\n\n  /**\n   * @returns {void}\n   */\n  showSuccess () {\n    this.addAlert(_('YourPasswordHasBeenReset'));\n  },\n\n  addAlert (msg) {\n    this.getSetPasswordAlert().text(msg);\n  },\n\n  /**\n   * @param {\"bad-session\"|undefined} type\n   * @returns {void}\n   */\n  showDanger (type) {\n    if (type === 'bad-session') {\n      return AlertDialog.populate({\n        heading: _('error'),\n        body: _('SessionLost', {\n          lb: $('<br/>')[0]\n        }),\n        keyboard: false,\n        backdrop: 'static'\n      });\n    }\n    return this.addAlert(_('SomethingWentWrongPleaseTryAgain'));\n  },\n\n  messages: {\n    ShouldBeMinimumLength: _('ShouldBeMinimumLength')\n  }\n};\n\nexport default ResetPasswordValidatorView;\n","/* globals Nogin */\nimport ResetPasswordValidatorView from\n  '../views/validators/ResetPasswordValidatorView.js';\n\n/**\n * Resetting password validation.\n */\nclass ResetPasswordValidator {\n  /**\n   * @param {external:jQuery} pass Password element\n   * @returns {boolean}\n   */\n  static validatePassword (pass) {\n    pass.setCustomValidity('');\n    // todo[cypress@>8.0.0]: validity: remove this disabling of istanbul\n    //   to see if fixed\n    //   see https://github.com/cypress-io/cypress/issues/6678\n    // istanbul ignore if\n    if (pass.validity.tooShort) {\n      pass.setCustomValidity(\n        ResetPasswordValidatorView.messages.ShouldBeMinimumLength\n      );\n    }\n    return pass.form.reportValidity();\n  }\n\n  /**\n   * Sets up properties.\n   */\n  constructor () {\n    this.modal = ResetPasswordValidatorView.setPasswordDialog();\n    this.alert = ResetPasswordValidatorView.getSetPasswordAlert();\n    this.alert.hide();\n  }\n\n  /**\n   * @returns {external:jQuery}\n   */\n  getPasswordDialog () {\n    return this.modal;\n  }\n\n  /**\n   * @param {\"bad-session\"|undefined} type\n   * @returns {void}\n   */\n  showAlert (type) {\n    const alertDialog = ResetPasswordValidatorView.showDanger(type);\n    if (alertDialog) {\n      alertDialog.modal('show');\n      const redirectToRoot = () => {\n        Nogin.redirect('root');\n      };\n      ResetPasswordValidatorView.getLockedAlertButton(alertDialog).click(\n        redirectToRoot\n      );\n      setTimeout(redirectToRoot, 3000);\n      return;\n    }\n\n    this.alert.show();\n  }\n\n  /**\n   * @returns {void}\n   */\n  hideAlert () {\n    this.alert.hide();\n  }\n\n  /**\n   * @returns {void}\n   */\n  showSuccess () {\n    ResetPasswordValidatorView.showSuccess();\n    this.alert.fadeIn(500);\n  }\n}\n\nexport default ResetPasswordValidator;\n","/* globals Nogin */\n\nimport ajaxFormClientSideValidate from\n  '../utilities/ajaxFormClientSideValidate.js';\nimport ResetPasswordView from '../views/reset-password.js';\nimport ResetPasswordValidator from\n  '../form-validators/ResetPasswordValidator.js';\n\nconst rv = new ResetPasswordValidator();\n\nconst pass = ResetPasswordView.getPassword();\n\nconst setPasswordSubmit = ResetPasswordView.getSetPasswordSubmit();\n\nconst setPasswordForm = ResetPasswordView.getSetPasswordForm();\n\najaxFormClientSideValidate(\n  setPasswordForm,\n  {\n    validate () {\n      rv.hideAlert();\n      ResetPasswordValidator.validatePassword(pass[0]);\n    },\n    beforeSubmit (formData, jqForm, options) {\n      rv.hideAlert();\n    },\n    success (responseText, status, xhr, $form) {\n      setPasswordSubmit.addClass('disabled');\n      setPasswordSubmit.prop('disabled', true);\n      rv.showSuccess();\n      setTimeout(() => {\n        Nogin.redirect('root');\n      }, 3000);\n    },\n    error (e) {\n      switch (e.responseText) {\n      case 'bad-session':\n        rv.showAlert('bad-session');\n        break;\n      default:\n        rv.showAlert();\n        break;\n      }\n    }\n  }\n);\n\nconst setPasswordDialog = rv.getPasswordDialog();\nsetPasswordDialog.on('shown.bs.modal', () => {\n  pass[0].focus();\n});\nsetPasswordDialog.modal('show');\n"],"names":["ResetPasswordView","$","form","validate","url","beforeSubmit","success","error","AlertDialog","heading","body","keyboard","backdrop","modal","show","text","empty","append","_","Nogin","ResetPasswordValidatorView","setPasswordDialog","getSetPasswordAlert","find","getLockedAlertButton","alertDialog","showSuccess","addAlert","msg","showDanger","type","lb","this","messages","ShouldBeMinimumLength","ResetPasswordValidator","alert","hide","pass","setCustomValidity","validity","tooShort","reportValidity","redirectToRoot","redirect","click","setTimeout","fadeIn","rv","setPasswordSubmit","setPasswordForm","hideAlert","validatePassword","formData","jqForm","options","responseText","status","xhr","$form","addClass","prop","e","showAlert","addEventListener","field","target","checkValidity","ajaxForm","getPasswordDialog","on","focus"],"mappings":"yBAAA,ICEMA,oBAKKC,EAAE,uBALPD,oBAYKC,EAAE,6BAZPD,oBAmBKC,EAAE,8MCnBb,IFFoCC,IAClCC,EAEAC,EACAC,EACAC,EACAC,EEJIC,kBAUFC,IAAAA,QACAC,IAAAA,KACAC,IAAAA,SACAC,IAAAA,gBAEAX,EAAE,2BAA2BY,MAAM,CACjCC,MAAM,EAAOH,SAAAA,EAAUC,SAAAA,IAEzBX,EAAE,iEAAiEc,KACjEN,GAEFR,EAAE,oDAAoDe,QAAQC,OAAOP,GAC9DT,EAAE,4BCrBNiB,EAAKC,MAALD,EAEDL,EAAQZ,EAAE,iBACVmB,EAA6B,CAIjCC,oCACER,EAAMA,MAAM,CAACC,MAAM,EAAOH,UAAU,EAAOC,SAAU,WAC9CC,GAMTS,sCACST,EAAMU,KAAK,WAOpBC,8BAAsBC,UACbA,EAAYF,KAAK,WAM1BG,4BACOC,SAAST,EAAE,8BAGlBS,kBAAUC,QACHN,sBAAsBP,KAAKa,IAOlCC,oBAAYC,SACG,gBAATA,EACKtB,EAAqB,CAC1BC,QAASS,EAAE,SACXR,KAAMQ,EAAE,cAAe,CACrBa,GAAI9B,EAAE,SAAS,KAEjBU,UAAU,EACVC,SAAU,WAGPoB,KAAKL,SAAST,EAAE,sCAGzBe,SAAU,CACRC,sBAAuBhB,EAAE,2BCrDvBiB,qIAuBGtB,MAAQO,EAA2BC,yBACnCe,MAAQhB,EAA2BE,2BACnCc,MAAMC,sEApBYC,UACvBA,EAAKC,kBAAkB,IAKnBD,EAAKE,SAASC,UAChBH,EAAKC,kBACHnB,EAA2Ba,SAASC,uBAGjCI,EAAKpC,KAAKwC,uDAenB,kBACSV,KAAKnB,+BAOd,SAAWiB,OACHL,EAAcL,EAA2BS,WAAWC,MACtDL,EAAa,CACfA,EAAYZ,MAAM,YACZ8B,EAAiB,WACrBxB,MAAMyB,SAAS,gBAEjBxB,EAA2BI,qBAAqBC,GAAaoB,MAC3DF,QAEFG,WAAWH,EAAgB,UAIxBP,MAAMtB,gCAMb,gBACOsB,MAAMC,kCAMb,WACEjB,EAA2BM,mBACtBU,MAAMW,OAAO,0CCnEhBC,EAAK,IAAIb,EAETG,EAAOtC,IAEPiD,EAAoBjD,IAEpBkD,EAAkBlD,ILdYE,EKiBlCgD,ELhBA/C,KKiBA,CACEA,oBACE6C,EAAGG,YACHhB,EAAuBiB,iBAAiBd,EAAK,KAE/CjC,sBAAcgD,EAAUC,EAAQC,GAC9BP,EAAGG,aAEL7C,iBAASkD,EAAcC,EAAQC,EAAKC,GAClCV,EAAkBW,SAAS,YAC3BX,EAAkBY,KAAK,YAAY,GACnCb,EAAGtB,cACHoB,YAAW,WACT3B,MAAMyB,SAAS,UACd,MAELrC,eAAOuD,UACGA,EAAEN,kBACL,cACHR,EAAGe,UAAU,6BAGbf,EAAGe,gBLvCT5D,SAEAC,IAAAA,IACAC,IAAAA,aACAC,IAAAA,QACAC,IAAAA,MASAL,EAAK,GAAG8D,iBAAiB,UAAU,SAACF,GAElC3D,EAAS2D,MACR,GAEH5D,EAAK,GAAG8D,iBAAiB,SAAS,gBAAUC,IAARC,OAClCD,EAAM1B,kBAAkB,IACxB0B,EAAME,cAAc,OACnB,GAEIjE,EAAKkE,SAAS,CACnBhE,IAAAA,EACAC,aAAAA,EACAC,QAAAA,EACAC,MAAAA,IKkBJ,IAAMc,EAAoB2B,EAAGqB,oBAC7BhD,EAAkBiD,GAAG,kBAAkB,WACrChC,EAAK,GAAGiC,WAEVlD,EAAkBR,MAAM"}