{"version":3,"file":"resetPasswordController.iife.min.js","sources":["../utilities/ajaxFormClientSideValidate.js","../views/reset-password.js","../views/utilities/AlertDialog.js","../views/validators/ResetPasswordValidatorView.js","../form-validators/ResetPasswordValidator.js","resetPasswordController.js"],"sourcesContent":["/* globals $, Nogin */\n\n// Note: This per-request approach suffers from the possibility that the\n//   may subsequently open a page from the site with nogin in another tab\n//   where that page sets a new, different token meta expectation to a\n//   new value and this will thereby become invalid.\nconst xsrfCookie = $('meta[name=\"csrf-token\"]').attr('content');\n\nconst ajaxFormClientSideValidate = (form, {\n  validate,\n  // `ajaxForm` properties and methods\n  url,\n  beforeSubmit,\n  success,\n  error,\n  checkXSRF = true\n}) => {\n  // As per problem #3 at https://www.html5rocks.com/en/tutorials/forms/constraintvalidation/#toc-current-implementation-issues ,\n  //  we can't do the validation at submit, so we instead add a capturing\n  //  change listener as well as input listeners to reset the messages;\n  //  note that we can't use the `invalid` event to call `reportValidity`\n  //  after our `setCustomValidity()` (to ensure we get the bubbles showing)\n  //  as that fires further `invalid` events; and setting the form to\n  //  `novalidate` won't show the bubbles.\n  form[0].addEventListener('change', (e) => {\n    // Provide custom messages of invalidity\n    validate(e);\n  }, true);\n\n  form[0].addEventListener('input', ({target: field}) => {\n    field.setCustomValidity('');\n    field.checkValidity('');\n  }, true);\n\n  // istanbul ignore if\n  if (checkXSRF && !xsrfCookie && !Nogin.disableXSRF) {\n    error({responseText: 'UnknownError'});\n    return;\n  }\n\n  form.ajaxForm({\n    headers: {\n      // `$.ajaxForm` will auto-check for special `meta` tags to add XSRF\n      //   data, but we avoid the extra meta it requires by sending on the\n      //   header.\n      'X-XSRF-Token': xsrfCookie\n    },\n    url,\n    beforeSubmit,\n    success,\n    error\n  });\n};\n\nexport default ajaxFormClientSideValidate;\n","/* globals $ */\n\nconst ResetPasswordView = {\n  /**\n   * @returns {external:jQuery} `HTMLFormElement`\n   */\n  getSetPasswordForm () {\n    return $('#set-password-form');\n  },\n\n  /**\n   * @returns {external:jQuery} `HTMLInputElement`\n   */\n  getPassword () {\n    return $('[data-name=\"reset-pass\"]');\n  },\n\n  /**\n   * @returns {external:jQuery} `HTMLButtonElement`\n   */\n  getSetPasswordSubmit () {\n    return $('[data-name=\"reset-password-submit\"]');\n  }\n};\n\nexport default ResetPasswordView;\n","/* globals $ */\n\nconst AlertDialog = {\n  /**\n   * @param {PlainObject} cfg\n   * @param {string} cfg.heading\n   * @param {external:jQuery} cfg.body\n   * @param {boolean} cfg.keyboard\n   * @param {boolean|\"static\"} cfg.backdrop\n   * @returns {external:jQuery} `HTMLDivElement`\n   */\n  populate ({\n    heading,\n    body,\n    keyboard,\n    backdrop\n  }) {\n    const modal = $('[data-name=modal-alert]').modal({\n      show: false, keyboard, backdrop\n    });\n    $('[data-name=modal-alert] .modal-header [data-name=modal-title]').text(\n      heading\n    );\n    $('[data-name=modal-alert] [data-name=modal-body] p').empty().append(body);\n    $('[data-name=modal-alert] button').click((e) => {\n      e.preventDefault();\n      modal.modal('hide');\n    });\n    return modal;\n  }\n};\n\nexport default AlertDialog;\n","/* globals $, Nogin */\nimport AlertDialog from '../utilities/AlertDialog.js';\n\nconst {_} = Nogin;\n\nconst modal = $('#set-password');\nconst ResetPasswordValidatorView = {\n  /**\n   * @returns {external:jQuery} `HTMLDivElement`\n   */\n  setPasswordDialog () {\n    modal.modal({show: false, keyboard: false, backdrop: 'static'});\n    return modal;\n  },\n\n  /**\n   * @returns {external:jQuery} `HTMLDivElement`\n   */\n  getSetPasswordAlert () {\n    return modal.find('.alert');\n  },\n\n  /**\n   * @param {external:jQuery} alertDialog\n   * @returns {external:jQuery} `HTMLButtonElement`\n   */\n  getLockedAlertButton (alertDialog) {\n    return alertDialog.find('button');\n  },\n\n  /**\n   * @returns {void}\n   */\n  showSuccess () {\n    this.addAlert(_('YourPasswordHasBeenReset'));\n  },\n\n  addAlert (msg) {\n    this.getSetPasswordAlert().text(msg);\n  },\n\n  /**\n   * @param {\"bad-session\"|undefined} type\n   * @returns {void}\n   */\n  showDanger (type) {\n    if (type === 'bad-session') {\n      return AlertDialog.populate({\n        heading: _('error'),\n        body: _('SessionLost', {\n          lb: $('<br/>')[0]\n        }),\n        keyboard: false,\n        backdrop: 'static'\n      });\n    }\n    return this.addAlert(_('SomethingWentWrongPleaseTryAgain'));\n  },\n\n  messages: {\n    ShouldBeMinimumLength: _('ShouldBeMinimumLength')\n  }\n};\n\nexport default ResetPasswordValidatorView;\n","/* globals Nogin */\nimport ResetPasswordValidatorView from\n  '../views/validators/ResetPasswordValidatorView.js';\n\n/**\n * Resetting password validation.\n */\nclass ResetPasswordValidator {\n  /**\n   * @param {external:jQuery} pass Password element\n   * @returns {boolean}\n   */\n  static validatePassword (pass) {\n    pass.setCustomValidity('');\n    // todo[cypress@>=13.0.0]: validity: remove this disabling of istanbul\n    //   to see if fixed\n    //   see https://github.com/cypress-io/cypress/issues/6678\n    // istanbul ignore if\n    if (pass.validity.tooShort) {\n      pass.setCustomValidity(\n        ResetPasswordValidatorView.messages.ShouldBeMinimumLength\n      );\n    }\n    return pass.form.reportValidity();\n  }\n\n  /**\n   * Sets up properties.\n   */\n  constructor () {\n    this.modal = ResetPasswordValidatorView.setPasswordDialog();\n    this.alert = ResetPasswordValidatorView.getSetPasswordAlert();\n    this.alert.hide();\n  }\n\n  /**\n   * @returns {external:jQuery}\n   */\n  getPasswordDialog () {\n    return this.modal;\n  }\n\n  /**\n   * @param {\"bad-session\"|undefined} type\n   * @returns {void}\n   */\n  showAlert (type) {\n    const alertDialog = ResetPasswordValidatorView.showDanger(type);\n    if (alertDialog) {\n      alertDialog.modal('show');\n      const redirectToRoot = () => {\n        Nogin.redirect('root');\n      };\n      ResetPasswordValidatorView.getLockedAlertButton(alertDialog).click(\n        redirectToRoot\n      );\n      setTimeout(redirectToRoot, 3000);\n      return;\n    }\n\n    this.alert.show();\n  }\n\n  /**\n   * @returns {void}\n   */\n  hideAlert () {\n    this.alert.hide();\n  }\n\n  /**\n   * @returns {void}\n   */\n  showSuccess () {\n    ResetPasswordValidatorView.showSuccess();\n    this.alert.fadeIn(500);\n  }\n}\n\nexport default ResetPasswordValidator;\n","/* globals Nogin */\n\nimport ajaxFormClientSideValidate from\n  '../utilities/ajaxFormClientSideValidate.js';\nimport ResetPasswordView from '../views/reset-password.js';\nimport ResetPasswordValidator from\n  '../form-validators/ResetPasswordValidator.js';\n\nconst rv = new ResetPasswordValidator();\n\nconst pass = ResetPasswordView.getPassword();\n\nconst setPasswordSubmit = ResetPasswordView.getSetPasswordSubmit();\n\nconst setPasswordForm = ResetPasswordView.getSetPasswordForm();\n\najaxFormClientSideValidate(\n  setPasswordForm,\n  {\n    validate () {\n      rv.hideAlert();\n      ResetPasswordValidator.validatePassword(pass[0]);\n    },\n    beforeSubmit (formData, jqForm, options) {\n      rv.hideAlert();\n    },\n    success (responseText, status, xhr, $form) {\n      setPasswordSubmit.addClass('disabled');\n      setPasswordSubmit.prop('disabled', true);\n      rv.showSuccess();\n      setTimeout(() => {\n        Nogin.redirect('root');\n      }, 3000);\n    },\n    error (e) {\n      switch (e.responseText) {\n      case 'bad-session':\n        rv.showAlert('bad-session');\n        break;\n      default:\n        rv.showAlert();\n        break;\n      }\n    }\n  }\n);\n\nconst setPasswordDialog = rv.getPasswordDialog();\nsetPasswordDialog.on('shown.bs.modal', () => {\n  pass[0].focus();\n});\nsetPasswordDialog.modal('show');\n"],"names":["xsrfCookie","$","attr","ResetPasswordView","form","_ref","validate","url","beforeSubmit","success","error","_ref$checkXSRF","checkXSRF","AlertDialog","heading","body","keyboard","backdrop","modal","show","text","empty","append","click","e","preventDefault","_","Nogin","ResetPasswordValidatorView","setPasswordDialog","getSetPasswordAlert","find","getLockedAlertButton","alertDialog","showSuccess","this","addAlert","msg","showDanger","type","lb","messages","ShouldBeMinimumLength","ResetPasswordValidator","_classCallCheck","alert","hide","key","value","pass","setCustomValidity","validity","tooShort","reportValidity","redirectToRoot","redirect","setTimeout","fadeIn","rv","setPasswordSubmit","setPasswordForm","hideAlert","validatePassword","formData","jqForm","options","responseText","status","xhr","$form","addClass","prop","showAlert","addEventListener","_ref2","field","target","checkValidity","disableXSRF","ajaxForm","headers","getPasswordDialog","on","focus"],"mappings":"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"}