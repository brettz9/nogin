{"version":3,"file":"loginController.iife.min.js","sources":["../utilities/ajaxFormClientSideValidate.js","../views/login.js","../views/validators/LoginValidatorView.js","../views/utilities/AlertDialog.js","../form-validators/LoginValidator.js","../views/validators/EmailValidatorView.js","../form-validators/EmailValidator.js","loginController.js"],"sourcesContent":["/* globals $, Nogin */\n\n// Note: This per-request approach suffers from the possibility that the\n//   may subsequently open a page from the site with nogin in another tab\n//   where that page sets a new, different token meta expectation to a\n//   new value and this will thereby become invalid.\nconst xsrfCookie = $('meta[name=\"csrf-token\"]').attr('content');\n\n/**\n * @typedef {{\n *   headers?: {[key: string]: string|undefined},\n *   url?: string,\n *   beforeSubmit?: (\n *     arr: {name: string, value: string|boolean}[],\n *     $form: any,\n *     options: any\n *   ) => boolean|void,\n *   success: (\n *     responseText: string, status: string, xhr: any, $form: JQuery\n *   ) => void,\n *   error: (cfg: {\n *     responseText: string\n *   }) => void,\n * }} AjaxFormConfig\n */\n\n/**\n * @typedef {JQuery & {\n *   ajaxForm: (cfg: AjaxFormConfig) => void\n * }} JQueryWithAjaxForm\n */\n\n/**\n * @param {JQueryWithAjaxForm} form\n * @param {AjaxFormConfig & {\n *   validate: (e: Event) => void,\n *   checkXSRF?: boolean\n * }} cfg\n * @returns {void}\n */\nconst ajaxFormClientSideValidate = (form, {\n  validate,\n  // `ajaxForm` properties and methods\n  url,\n  beforeSubmit,\n  success,\n  error,\n  checkXSRF = true\n}) => {\n  // As per problem #3 at https://www.html5rocks.com/en/tutorials/forms/constraintvalidation/#toc-current-implementation-issues ,\n  //  we can't do the validation at submit, so we instead add a capturing\n  //  change listener as well as input listeners to reset the messages;\n  //  note that we can't use the `invalid` event to call `reportValidity`\n  //  after our `setCustomValidity()` (to ensure we get the bubbles showing)\n  //  as that fires further `invalid` events; and setting the form to\n  //  `novalidate` won't show the bubbles.\n  form[0].addEventListener('change', (e) => {\n    // Provide custom messages of invalidity\n    validate(e);\n  }, true);\n\n  form[0].addEventListener('input', ({target}) => {\n    const field = /** @type {HTMLInputElement} */ (target);\n    field.setCustomValidity('');\n    field.checkValidity();\n  }, true);\n\n  // istanbul ignore if\n  if (checkXSRF && !xsrfCookie && !Nogin.disableXSRF) {\n    error({responseText: 'UnknownError'});\n    return;\n  }\n\n  form.ajaxForm({\n    headers: {\n      // `$.ajaxForm` will auto-check for special `meta` tags to add XSRF\n      //   data, but we avoid the extra meta it requires by sending on the\n      //   header.\n      'X-XSRF-Token': xsrfCookie\n    },\n    url,\n    beforeSubmit,\n    success,\n    error\n  });\n};\n\nexport default ajaxFormClientSideValidate;\n","/* globals $, Nogin */\n\nconst LoginView = {\n  /**\n   * @returns {JQuery} `HTMLDivElement`\n   */\n  getInputForInitialFocus () {\n    return $('input:text:visible:first');\n  },\n  /**\n   * @returns {JQuery} `HTMLDivElement`\n   */\n  getLoginModal () {\n    return $('#login');\n  },\n\n  /**\n   * @returns {import('../views/utilities/AlertDialog.js').\n   *   JQueryWithModal} `HTMLDivElement`\n   */\n  retrievePasswordModal () {\n    const retrievePasswordModal =\n      /**\n       * @type {import('../views/utilities/AlertDialog.js').\n       *   JQueryWithModal}\n       */ (\n        $('#retrieve-password')\n      );\n    retrievePasswordModal.modal({\n      show: false, keyboard: true, backdrop: true\n    });\n    return retrievePasswordModal;\n  },\n\n  /**\n   * @param {JQuery} retrievePasswordModal `HTMLDivElement`\n   * @returns {import('../utilities/ajaxFormClientSideValidate.js').\n   *   JQueryWithAjaxForm} `HTMLFormElement`\n   */\n  retrievePasswordForm (retrievePasswordModal) {\n    return (\n      /**\n       * @type {import('../utilities/ajaxFormClientSideValidate.js').\n       * JQueryWithAjaxForm}\n       */\n      (retrievePasswordModal.find('#retrieve-password-form'))\n    );\n  },\n\n  /**\n   * @returns {import('../utilities/ajaxFormClientSideValidate.js').\n   *   JQueryWithAjaxForm\n   * } `HTMLFormElement`\n   */\n  getLoginForm () {\n    return (\n      /**\n       * @type {import('../utilities/ajaxFormClientSideValidate.js').\n       *   JQueryWithAjaxForm}\n       */ ($('[data-name=login] form'))\n    );\n  },\n\n  /**\n   * @param {JQuery} retrievePasswordModal `HTMLDivElement`\n   * @returns {JQuery} `HTMLButtonElement`\n   */\n  retrievePasswordSubmit (retrievePasswordModal) {\n    return retrievePasswordModal.find('[data-name=retrieve-password-submit]');\n  },\n\n  /**\n   * @param {JQuery} retrievePasswordModal `HTMLDivElement`\n   * @returns {JQuery} `HTMLButtonElement`\n   */\n  retrievePasswordCancel (retrievePasswordModal) {\n    return retrievePasswordModal.find('[data-name=retrieve-password-cancel]');\n  },\n\n  /**\n   * @param {JQuery} retrievePasswordModal `HTMLDivElement`\n   * @returns {JQuery} `HTMLInputElement`\n   */\n  retrieveLostPasswordEmail (retrievePasswordModal) {\n    return retrievePasswordModal.find('[data-name=\"email\"]');\n  },\n\n  /**\n   * @param {JQuery} loginModal `HTMLDivElement`\n   * @returns {JQuery} `HTMLInputElement`\n   */\n  getLostPasswordUsername (loginModal) {\n    return loginModal.find('[data-name=\"user\"]');\n  },\n\n  /**\n   * @param {JQuery} loginModal\n   * @returns {JQuery} `HTMLDivElement`\n   */\n  getForgotPassword (loginModal) {\n    return loginModal.find('[data-name=\"forgot-password\"]');\n  },\n\n  /**\n  * @param {JQuery} loginModal\n  * @returns {JQuery} `HTMLButtonElement`\n  */\n  getRememberMeButton (loginModal) {\n    return loginModal.find('button.remember-me');\n  },\n\n  /**\n  * @param {JQuery} loginModal\n  * @returns {boolean}\n  */\n  isRememberMeChecked (loginModal) {\n    return this.getRememberMeButton(loginModal).find('span').hasClass(\n      'fa-check-square'\n    );\n  },\n\n  /**\n  * @param {JQuery} retrievePasswordModal `HTMLDivElement`\n  * @returns {JQuery}\n  */\n  setRetrievePasswordCancel (retrievePasswordModal) {\n    return this.retrievePasswordCancel(retrievePasswordModal).text(\n      /** @type {string} */ (Nogin._('Cancel'))\n    );\n  },\n\n  /**\n  * @param {JQuery} loginModal\n  * @returns {void}\n  */\n  toggleCheckSquare (loginModal) {\n    const span = this.getRememberMeButton(loginModal).find('span');\n    // todo[cypress@>=14.0.0]: class checking: remove this disabling of\n    //   istanbul to see if fixed\n    // istanbul ignore if\n    if (span.hasClass('fa-minus-square')) {\n      span.removeClass('fa-minus-square').\n        addClass('fa-check-square');\n    } else {\n      span.addClass('fa-minus-square').\n        removeClass('fa-check-square');\n    }\n  },\n\n  /**\n   * @param {JQuery} retrievePasswordModal `HTMLDivElement`\n   * @returns {void}\n   */\n  switchConfirmToAlert (retrievePasswordModal) {\n    this.retrievePasswordCancel(retrievePasswordModal).text('OK');\n  }\n};\n\nexport default LoginView;\n","/* globals $, Nogin */\n\nconst {_} = Nogin;\n\n/**\n* @typedef {object} LoginInfoElements\n* @property {HTMLInputElement} user\n* @property {HTMLInputElement} pass\n*/\n\nconst LoginValidatorView = {\n  /**\n   * @returns {LoginInfoElements}\n   */\n  getFormFields () {\n    return {\n      user: /** @type {HTMLInputElement} */ ($('[data-name=\"user\"]')[0]),\n      pass: /** @type {HTMLInputElement} */ ($('[data-name=\"pass\"]')[0])\n    };\n  },\n\n  errorMessages: {\n    PleaseEnterValidUserName: /** @type {string} */ (\n      _('PleaseEnterValidUserName')\n    ),\n    PleaseEnterValidPassword: /** @type {string} */ (\n      _('PleaseEnterValidPassword')\n    ),\n    LoginFailure: /** @type {string} */ (_('LoginFailure')),\n    PleaseCheckYourUserNameOrPassword: /** @type {string} */ (\n      _('PleaseCheckYourUserNameOrPassword')\n    ),\n    MismatchUserDataFormat: /** @type {string} */ (_('MismatchUserDataFormat'))\n  },\n\n  messages: {\n    LinkToResetPasswordMailed: _('LinkToResetPasswordMailed'),\n    EmailNotFound: _('EmailNotFound'),\n    ProblemTryAgainLater: _('ProblemTryAgainLater')\n  }\n};\n\nexport default LoginValidatorView;\n","/* globals $ */\n\n/**\n * @typedef {JQuery & {\n *   modal: (showOrHide: \"show\"|\"hide\"|{\n *     show: boolean,\n *     keyboard: boolean,\n *     backdrop: boolean|\"static\"\n *   }) => JQueryWithModal\n * }} JQueryWithModal\n */\n\nconst AlertDialog = {\n  /**\n   * @param {object} cfg\n   * @param {string} cfg.heading\n   * @param {Element|string} cfg.body\n   * @param {boolean} cfg.keyboard\n   * @param {boolean|\"static\"} cfg.backdrop\n   * @returns {JQueryWithModal} `HTMLDivElement`\n   */\n  populate ({\n    heading,\n    body,\n    keyboard,\n    backdrop\n  }) {\n    const modal = /** @type {JQueryWithModal} */ (\n      $('[data-name=modal-alert]')).modal({\n      show: false, keyboard, backdrop\n    });\n    $('[data-name=modal-alert] .modal-header [data-name=modal-title]').text(\n      heading\n    );\n    $('[data-name=modal-alert] [data-name=modal-body] p').empty().append(body);\n    $('[data-name=modal-alert] button').on('click', (e) => {\n      e.preventDefault();\n      modal.modal('hide');\n    });\n    return modal;\n  }\n};\n\nexport default AlertDialog;\n","import AlertDialog from '../views/utilities/AlertDialog.js';\nimport LoginValidatorView from '../views/validators/LoginValidatorView.js';\n\nconst {user, pass} = LoginValidatorView.getFormFields();\n\n/**\n * Login validation.\n */\nconst LoginValidator = {\n  /**\n   * @returns {boolean}\n   */\n  validateForm () {\n    if (user.validity.valueMissing) {\n      user.setCustomValidity(\n        /** @type {string} */ (\n          LoginValidatorView.errorMessages.PleaseEnterValidUserName\n        )\n      );\n      /** @type {HTMLFormElement} */ (user.form).reportValidity();\n      return false;\n    }\n    if (pass.validity.valueMissing) {\n      pass.setCustomValidity(\n        /** @type {string} */ (\n          LoginValidatorView.errorMessages.PleaseEnterValidPassword\n        )\n      );\n      /** @type {HTMLFormElement} */ (pass.form).reportValidity();\n      return false;\n    }\n    return true;\n  },\n\n  /**\n  * Bind a simple alert window to this controller to display any errors.\n  * @param {\"MismatchUserDataFormat\"} [msg]\n  * @returns {void}\n  */\n  showLoginError (msg) {\n    const loginErrors = AlertDialog.populate({\n      heading: LoginValidatorView.errorMessages.LoginFailure,\n      body: msg\n        ? LoginValidatorView.errorMessages[msg]\n        : LoginValidatorView.errorMessages.PleaseCheckYourUserNameOrPassword,\n      keyboard: true,\n      backdrop: true\n    });\n    loginErrors.modal('show');\n  }\n};\n\nexport default LoginValidator;\n","/* globals $, Nogin */\n\n/**\n* @typedef {object} EmailInfoElements\n* @property {JQuery} name\n* @property {JQuery} email\n* @property {JQuery} user\n* @property {JQuery} pass\n*/\n\nconst EmailValidatorView = {\n  /**\n   * @returns {{\n   *   retrievePasswordModal: JQuery,\n   *   retrievePasswordAlert: JQuery,\n   *   retrievePasswordForm: JQuery & {\n   *     resetForm: () => void\n   *   }\n   * }}\n   */\n  getFormFields () {\n    return {\n      retrievePasswordModal: $('#retrieve-password'),\n      retrievePasswordAlert: $('#retrieve-password [data-name=alert]'),\n      retrievePasswordForm:\n      /**\n       * @type {JQuery & {\n       *   resetForm: () => void\n       * }}\n       */ ($('#retrieve-password #retrieve-password-form'))\n    };\n  },\n\n  /**\n   * @param {string} msg\n   */\n  addSuccess (msg) {\n    const {retrievePasswordAlert} = this.getFormFields();\n    retrievePasswordAlert.attr('class', 'alert alert-success');\n    retrievePasswordAlert.text(msg);\n  },\n\n  messages: {\n    PleaseEnterValidEmailAddress: /** @type {string} */ (\n      Nogin._('PleaseEnterValidEmailAddress')\n    )\n  }\n};\n\nexport default EmailValidatorView;\n","import EmailValidatorView from '../views/validators/EmailValidatorView.js';\n\n/**\n * Validator for email addresses.\n */\nconst EmailValidator = class EmailValidator {\n  /**\n   * @param {HTMLInputElement} input Email input element\n   * @returns {boolean} Whether valid\n   */\n  static validateEmail (input) {\n    input.setCustomValidity('');\n    if (input.validity.patternMismatch) {\n      input.setCustomValidity(\n        EmailValidatorView.messages.PleaseEnterValidEmailAddress\n      );\n    }\n    return /** @type {HTMLFormElement} */ (input.form).reportValidity();\n  }\n\n  /**\n   * Sets up properties and events.\n   */\n  constructor () {\n    const {\n      retrievePasswordModal, retrievePasswordAlert, retrievePasswordForm\n    } = EmailValidatorView.getFormFields();\n\n    retrievePasswordModal.on('show.bs.modal', () => {\n      retrievePasswordForm.resetForm();\n      retrievePasswordAlert.hide();\n    });\n\n    this.retrievePasswordAlert = retrievePasswordAlert;\n  }\n\n  /**\n   * @param {string} msg The message\n   * @returns {void}\n   */\n  showEmailAlert (msg) {\n    EmailValidatorView.addSuccess(msg);\n    this.retrievePasswordAlert.show();\n  }\n\n  /**\n   * @returns {void}\n   */\n  hideEmailAlert () {\n    this.retrievePasswordAlert.hide();\n  }\n\n  /**\n   * @param {string} msg The message\n   * @returns {void}\n   */\n  showEmailSuccess (msg) {\n    EmailValidatorView.addSuccess(msg);\n    this.retrievePasswordAlert.fadeIn(500);\n  }\n};\n\nexport default EmailValidator;\n","/* globals Nogin */\n\nimport '../polyfills/console.js';\nimport ajaxFormClientSideValidate from\n  '../utilities/ajaxFormClientSideValidate.js';\nimport LoginView from '../views/login.js';\nimport LoginValidatorView from '../views/validators/LoginValidatorView.js';\nimport LoginValidator from '../form-validators/LoginValidator.js';\nimport EmailValidator from '../form-validators/EmailValidator.js';\n\nconst loginModal = LoginView.getLoginModal();\nconst loginForm = LoginView.getLoginForm();\nconst forgotPassword = LoginView.getForgotPassword(loginModal);\nconst rememberMeButton = LoginView.getRememberMeButton(loginModal);\nconst lostPasswordUsername = LoginView.getLostPasswordUsername(loginModal);\n\nconst retrievePasswordModal = LoginView.retrievePasswordModal();\n\nconst retrievePasswordEmail = LoginView.retrieveLostPasswordEmail(\n  retrievePasswordModal\n);\nconst retrievePasswordForm = LoginView.retrievePasswordForm(\n  retrievePasswordModal\n);\nconst retrievePasswordSubmit = LoginView.retrievePasswordSubmit(\n  retrievePasswordModal\n);\n\n// bind event listeners to button clicks\nretrievePasswordSubmit.on('click', () => {\n  retrievePasswordForm.submit();\n});\nforgotPassword.on('click', () => {\n  const retrievePasswordCancel = LoginView.setRetrievePasswordCancel(\n    retrievePasswordModal\n  );\n\n  // This isn't always happening automatically\n  retrievePasswordCancel.on('click', () => {\n    retrievePasswordModal.modal('hide');\n    setTimeout(() => {\n      lostPasswordUsername.focus();\n    });\n  });\n\n  retrievePasswordSubmit.show();\n  retrievePasswordModal.modal('show');\n});\n\n// automatically toggle focus between the email modal window and\n//   the login form\nretrievePasswordModal.on('shown.bs.modal', () => {\n  retrievePasswordEmail.focus();\n});\n/*\n// This was not consistently triggering in Cypress, so added click\n//    listener above to do the focusing\nretrievePasswordModal.on('hide.bs.modal', () => {\n  lostPasswordUsername.focus();\n});\n*/\n\najaxFormClientSideValidate(\n  loginForm,\n  {\n    validate () {\n      LoginValidator.validateForm();\n    },\n    beforeSubmit (formData /* , jqForm, options */) {\n      /*\n      // Doesn't get here; see comment above on validation\n      if (!LoginValidator.validateForm()) {\n        return false;\n      }\n      */\n      // append 'remember-me' option to formData to write local cookie\n      formData.push({\n        name: 'remember-me',\n        value: LoginView.isRememberMeChecked(loginModal)\n      });\n      return true;\n    },\n    success (responseText, status /* , xhr, $form */) {\n      // \"nocontent\" (204), \"notmodified\" (304), \"parseerror\" (JSON or XML)\n      // istanbul ignore else\n      if (status === 'success') {\n        Nogin.redirect('home');\n      }\n    },\n    error (e) {\n      switch (e.responseText) {\n      case 'unexpected-pass-version-error':\n        LoginValidator.showLoginError('MismatchUserDataFormat');\n        break;\n      default:\n        LoginValidator.showLoginError();\n        break;\n      }\n    }\n  }\n);\n\nLoginView.getInputForInitialFocus().focus();\nrememberMeButton.on('click', () => {\n  LoginView.toggleCheckSquare(loginModal);\n});\n\n// login retrieval form via email\nconst ev = new EmailValidator();\n\najaxFormClientSideValidate(\n  retrievePasswordForm,\n  {\n    validate () {\n      const emailInput = /** @type {HTMLInputElement} */ (\n        retrievePasswordEmail[0]\n      );\n      if (EmailValidator.validateEmail(emailInput)) {\n        ev.hideEmailAlert();\n      }\n    },\n    url: Nogin.Routes.lostPassword,\n    success (/* responseText, status, xhr, $form */) {\n      LoginView.switchConfirmToAlert(retrievePasswordModal);\n      retrievePasswordSubmit.hide();\n      ev.showEmailSuccess(\n        /** @type {string} */ (\n          LoginValidatorView.messages.LinkToResetPasswordMailed\n        )\n      );\n    },\n    error (e) {\n      if (e.responseText === 'email-not-found') {\n        ev.showEmailAlert(\n          /** @type {string} */ (LoginValidatorView.messages.EmailNotFound)\n        );\n      } else {\n        console.log(e);\n        LoginView.switchConfirmToAlert(retrievePasswordModal);\n        retrievePasswordSubmit.hide();\n        ev.showEmailAlert(/** @type {string} */ (\n          LoginValidatorView.messages.ProblemTryAgainLater\n        ));\n      }\n    }\n  }\n);\n"],"names":["xsrfCookie","$","attr","ajaxFormClientSideValidate","form","_ref","validate","url","beforeSubmit","success","error","_ref$checkXSRF","checkXSRF","addEventListener","e","_ref2","field","target","setCustomValidity","checkValidity","Nogin","disableXSRF","ajaxForm","headers","responseText","LoginView","getInputForInitialFocus","getLoginModal","retrievePasswordModal","modal","show","keyboard","backdrop","retrievePasswordForm","find","getLoginForm","retrievePasswordSubmit","retrievePasswordCancel","retrieveLostPasswordEmail","getLostPasswordUsername","loginModal","getForgotPassword","getRememberMeButton","isRememberMeChecked","this","hasClass","setRetrievePasswordCancel","text","_","toggleCheckSquare","span","removeClass","addClass","switchConfirmToAlert","LoginValidatorView","getFormFields","user","pass","errorMessages","PleaseEnterValidUserName","PleaseEnterValidPassword","LoginFailure","PleaseCheckYourUserNameOrPassword","MismatchUserDataFormat","messages","LinkToResetPasswordMailed","EmailNotFound","ProblemTryAgainLater","AlertDialog","heading","body","empty","append","on","preventDefault","_LoginValidatorView$g","LoginValidator","validity","valueMissing","reportValidity","msg","EmailValidatorView","retrievePasswordAlert","addSuccess","PleaseEnterValidEmailAddress","EmailValidator","_classCallCheck","_EmailValidatorView$g","resetForm","hide","key","value","input","patternMismatch","fadeIn","loginForm","forgotPassword","rememberMeButton","lostPasswordUsername","retrievePasswordEmail","submit","setTimeout","focus","formData","push","name","status","redirect","ev","emailInput","validateEmail","hideEmailAlert","Routes","lostPassword","showEmailSuccess","showEmailAlert","console","log"],"mappings":"yBAMA,IAAMA,EAAaC,EAAE,2BAA2BC,KAAK,WAkC/CC,EAA6B,SAACC,EAAIC,GAQlC,IAPJC,EAAQD,EAARC,SAEAC,EAAGF,EAAHE,IACAC,EAAYH,EAAZG,aACAC,EAAOJ,EAAPI,QACAC,EAAKL,EAALK,MAAKC,EAAAN,EACLO,UAAAA,OAAY,IAAHD,GAAOA,EAShBP,EAAK,GAAGS,iBAAiB,UAAU,SAACC,GAElCR,EAASQ,EACV,IAAE,GAEHV,EAAK,GAAGS,iBAAiB,SAAS,SAAAE,GAAc,IACxCC,EADkCD,EAANE,OAElCD,EAAME,kBAAkB,IACxBF,EAAMG,eACP,IAAE,IAGCP,GAAcZ,GAAeoB,MAAMC,YAKvCjB,EAAKkB,SAAS,CACZC,QAAS,CAIP,eAAgBvB,GAElBO,IAAAA,EACAC,aAAAA,EACAC,QAAAA,EACAC,MAAAA,IAdAA,EAAM,CAACc,aAAc,gBAgBzB,ECnFMC,EAAY,CAIhBC,wBAAuB,WACrB,OAAOzB,EAAE,2BACV,EAID0B,cAAa,WACX,OAAO1B,EAAE,SACV,EAMD2B,sBAAqB,WACnB,IAAMA,EAKF3B,EAAE,sBAKN,OAHA2B,EAAsBC,MAAM,CAC1BC,MAAM,EAAOC,UAAU,EAAMC,UAAU,IAElCJ,CACR,EAODK,qBAAoB,SAAEL,GACpB,OAKGA,EAAsBM,KAAK,0BAE/B,EAODC,aAAY,WACV,OAIOlC,EAAE,yBAEV,EAMDmC,uBAAsB,SAAER,GACtB,OAAOA,EAAsBM,KAAK,uCACnC,EAMDG,uBAAsB,SAAET,GACtB,OAAOA,EAAsBM,KAAK,uCACnC,EAMDI,0BAAyB,SAAEV,GACzB,OAAOA,EAAsBM,KAAK,sBACnC,EAMDK,wBAAuB,SAAEC,GACvB,OAAOA,EAAWN,KAAK,qBACxB,EAMDO,kBAAiB,SAAED,GACjB,OAAOA,EAAWN,KAAK,gCACxB,EAMDQ,oBAAmB,SAAEF,GACnB,OAAOA,EAAWN,KAAK,qBACxB,EAMDS,oBAAmB,SAAEH,GACnB,OAAOI,KAAKF,oBAAoBF,GAAYN,KAAK,QAAQW,SACvD,kBAEH,EAMDC,0BAAyB,SAAElB,GACzB,OAAOgB,KAAKP,uBAAuBT,GAAuBmB,KACjC3B,MAAM4B,EAAE,UAElC,EAMDC,kBAAiB,SAAET,GACjB,IAAMU,EAAON,KAAKF,oBAAoBF,GAAYN,KAAK,QAInDgB,EAAKL,SAAS,mBAChBK,EAAKC,YAAY,mBACfC,SAAS,mBAEXF,EAAKE,SAAS,mBACZD,YAAY,kBAEjB,EAMDE,qBAAoB,SAAEzB,GACpBgB,KAAKP,uBAAuBT,GAAuBmB,KAAK,KAC1D,GCzJKC,EAAK5B,MAAL4B,EAQDM,EAAqB,CAIzBC,cAAa,WACX,MAAO,CACLC,KAAuCvD,EAAE,sBAAsB,GAC/DwD,KAAuCxD,EAAE,sBAAsB,GAElE,EAEDyD,cAAe,CACbC,yBACEX,EAAE,4BAEJY,yBACEZ,EAAE,4BAEJa,aAAqCb,EAAE,gBACvCc,kCACEd,EAAE,qCAEJe,uBAA+Cf,EAAE,2BAGnDgB,SAAU,CACRC,0BAA2BjB,EAAE,6BAC7BkB,cAAelB,EAAE,iBACjBmB,qBAAsBnB,EAAE,0BC1BtBoB,EASI,SAAA/D,GAKL,IAJDgE,EAAOhE,EAAPgE,QACAC,EAAIjE,EAAJiE,KACAvC,EAAQ1B,EAAR0B,SACAC,EAAQ3B,EAAR2B,SAEMH,EACJ5B,EAAE,2BAA4B4B,MAAM,CACpCC,MAAM,EAAOC,SAAAA,EAAUC,SAAAA,IAUzB,OARA/B,EAAE,iEAAiE8C,KACjEsB,GAEFpE,EAAE,oDAAoDsE,QAAQC,OAAOF,GACrErE,EAAE,kCAAkCwE,GAAG,SAAS,SAAC3D,GAC/CA,EAAE4D,iBACF7C,EAAMA,MAAM,OACd,IACOA,CACT,ECrCF8C,EAAqBrB,EAAmBC,gBAAjCC,EAAImB,EAAJnB,KAAMC,EAAIkB,EAAJlB,KAKPmB,EAIQ,WACV,OAAIpB,EAAKqB,SAASC,cAChBtB,EAAKtC,kBAEDoC,EAAmBI,cAAcC,0BAGLH,EAAKpD,KAAM2E,kBACpC,IAELtB,EAAKoB,SAASC,eAChBrB,EAAKvC,kBAEDoC,EAAmBI,cAAcE,0BAGLH,EAAKrD,KAAM2E,kBACpC,EAGV,EAxBGH,EA+BU,SAAEI,GACMZ,EAAqB,CACvCC,QAASf,EAAmBI,cAAcG,aAC1CS,KAAMU,EACF1B,EAAmBI,cAAcsB,GACjC1B,EAAmBI,cAAcI,kCACrC/B,UAAU,EACVC,UAAU,IAEAH,MAAM,OACpB,ifCvCF,IAAMoD,EAAqB,CAUzB1B,cAAa,WACX,MAAO,CACL3B,sBAAuB3B,EAAE,sBACzBiF,sBAAuBjF,EAAE,wCACzBgC,qBAKKhC,EAAE,8CAEV,EAKDkF,WAAU,SAAEH,GACV,IAAOE,EAAyBtC,KAAKW,gBAA9B2B,sBACPA,EAAsBhF,KAAK,QAAS,uBACpCgF,EAAsBnC,KAAKiC,EAC5B,EAEDhB,SAAU,CACRoB,6BACEhE,MAAM4B,EAAE,kCCvCRqC,EAAc,WAkBlB,SAAAA,iGAAeC,MAAAD,GACb,IAAAE,EAEIN,EAAmB1B,gBADrB3B,EAAqB2D,EAArB3D,sBAAuBsD,EAAqBK,EAArBL,sBAAuBjD,EAAoBsD,EAApBtD,qBAGhDL,EAAsB6C,GAAG,iBAAiB,WACxCxC,EAAqBuD,YACrBN,EAAsBO,MACxB,IAEA7C,KAAKsC,sBAAwBA,CAC/B,WAhBC,SAkBDG,IAuBC,CAAA,CAAAK,IAAA,gBAAAC,MAjDD,SAAsBC,GAOpB,OANAA,EAAM1E,kBAAkB,IACpB0E,EAAMf,SAASgB,iBACjBD,EAAM1E,kBACJ+D,EAAmBjB,SAASoB,8BAGOQ,EAAMxF,KAAM2E,gBACrD,OAkBA,CAAA,CAAAW,IAAA,iBAAAC,MAIA,SAAgBX,GACdC,EAAmBE,WAAWH,GAC9BpC,KAAKsC,sBAAsBpD,MAC7B,GAEA,CAAA4D,IAAA,iBAAAC,MAGA,WACE/C,KAAKsC,sBAAsBO,MAC7B,GAEA,CAAAC,IAAA,mBAAAC,MAIA,SAAkBX,GAChBC,EAAmBE,WAAWH,GAC9BpC,KAAKsC,sBAAsBY,OAAO,IACpC,oFAzCCT,CAAA,CAbiB,GCKd7C,EAAaf,EAAUE,gBACvBoE,EAAYtE,EAAUU,eACtB6D,EAAiBvE,EAAUgB,kBAAkBD,GAC7CyD,EAAmBxE,EAAUiB,oBAAoBF,GACjD0D,EAAuBzE,EAAUc,wBAAwBC,GAEzDZ,EAAwBH,EAAUG,wBAElCuE,EAAwB1E,EAAUa,0BACtCV,GAEIK,EAAuBR,EAAUQ,qBACrCL,GAEIQ,EAAyBX,EAAUW,uBACvCR,GAIFQ,EAAuBqC,GAAG,SAAS,WACjCxC,EAAqBmE,QACvB,IACAJ,EAAevB,GAAG,SAAS,WACMhD,EAAUqB,0BACvClB,GAIqB6C,GAAG,SAAS,WACjC7C,EAAsBC,MAAM,QAC5BwE,YAAW,WACTH,EAAqBI,OACvB,GACF,IAEAlE,EAAuBN,OACvBF,EAAsBC,MAAM,OAC9B,IAIAD,EAAsB6C,GAAG,kBAAkB,WACzC0B,EAAsBG,OACxB,IASAnG,EACE4F,EACA,CACEzF,SAAQ,WACNsE,GACD,EACDpE,aAAYA,SAAE+F,GAYZ,OAJAA,EAASC,KAAK,CACZC,KAAM,cACNd,MAAOlE,EAAUkB,oBAAoBH,MAEhC,CACR,EACD/B,iBAASe,EAAckF,GAGN,YAAXA,GACFtF,MAAMuF,SAAS,OAElB,EACDjG,MAAK,SAAEI,GACL,GACK,kCADGA,EAAEU,aAERoD,EAA8B,+BAG9BA,GAGJ,IAIJnD,EAAUC,0BAA0B4E,QACpCL,EAAiBxB,GAAG,SAAS,WAC3BhD,EAAUwB,kBAAkBT,EAC9B,IAGA,IAAMoE,EAAK,IAAIvB,EAEflF,EACE8B,EACA,CACE3B,SAAQ,WACN,IAAMuG,EACJV,EAAsB,GAEpBd,EAAeyB,cAAcD,IAC/BD,EAAGG,gBAEN,EACDxG,IAAKa,MAAM4F,OAAOC,aAClBxG,QAAO,WACLgB,EAAU4B,qBAAqBzB,GAC/BQ,EAAuBqD,OACvBmB,EAAGM,iBAEC5D,EAAmBU,SAASC,0BAGjC,EACDvD,MAAK,SAAEI,GACkB,oBAAnBA,EAAEU,aACJoF,EAAGO,eACsB7D,EAAmBU,SAASE,gBAGrDkD,QAAQC,IAAIvG,GACZW,EAAU4B,qBAAqBzB,GAC/BQ,EAAuBqD,OACvBmB,EAAGO,eACD7D,EAAmBU,SAASG,sBAGlC"}